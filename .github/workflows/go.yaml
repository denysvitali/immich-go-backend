name: CI Pipeline

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  security-events: write  # Required for uploading SARIF results

env:
  GO_VERSION: '1.21'

jobs:
  # Job 1: Generate Protocol Buffers and Build
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for buf breaking change detection
        fetch-depth: 0

    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        nix_path: nixpkgs=channel:nixos-25.05

    - name: Setup Nix Cache
      uses: cachix/cachix-action@v13
      with:
        name: devenv

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache generated protobuf files
      uses: actions/cache@v4
      id: proto-cache
      with:
        path: internal/proto/gen
        key: ${{ runner.os }}-proto-${{ hashFiles('internal/proto/**/*.proto', 'buf.gen.yaml', 'buf.work.yaml', 'internal/proto/buf.yaml') }}
        restore-keys: |
          ${{ runner.os }}-proto-

    - name: Generate Protocol Buffers with Nix
      if: steps.proto-cache.outputs.cache-hit != 'true'
      run: |
        echo "🔨 Generating protocol buffers using Nix environment..."
        nix develop --command bash -c "
          echo '📦 Verifying tools are available...'
          which protoc protoc-gen-go protoc-gen-go-grpc buf
          
          echo '🧹 Cleaning previous generated files...'
          rm -rf internal/proto/gen
          
          echo '🔨 Running buf generate...'
          buf generate
          
          echo '✅ Protocol buffer generation complete!'
          find internal/proto/gen -name '*.go' | head -10
        "

    - name: Verify generated files exist
      run: |
        if [ ! -d "internal/proto/gen" ] || [ -z "$(ls -A internal/proto/gen)" ]; then
          echo "❌ No protocol buffer files were generated"
          exit 1
        fi
        echo "✅ Generated $(find internal/proto/gen -name '*.go' | wc -l) Go files"

    - name: Download Go dependencies
      run: go mod download

    - name: Verify Go modules
      run: go mod tidy && git diff --exit-code go.mod go.sum

    - name: Build application
      run: |
        echo "🔨 Building application..."
        go build -v -o bin/immich-go-backend ./cmd/main.go

    - name: Run tests
      run: |
        echo "🧪 Running tests..."
        go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # Job 2: Code Quality and Linting
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build  # Wait for protobuf generation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        nix_path: nixpkgs=channel:nixos-25.05

    - name: Setup Nix Cache
      uses: cachix/cachix-action@v13
      with:
        name: devenv

    - name: Cache generated protobuf files
      uses: actions/cache@v4
      id: proto-cache
      with:
        path: internal/proto/gen
        key: ${{ runner.os }}-proto-${{ hashFiles('internal/proto/**/*.proto', 'buf.gen.yaml', 'buf.work.yaml', 'internal/proto/buf.yaml') }}
        restore-keys: |
          ${{ runner.os }}-proto-

    - name: Generate Protocol Buffers if not cached
      if: steps.proto-cache.outputs.cache-hit != 'true'
      run: |
        echo "🔨 Generating protocol buffers for linting..."
        nix develop --command bash -c "
          echo '🧹 Cleaning previous generated files...'
          rm -rf internal/proto/gen
          
          echo '🔨 Running buf generate...'
          buf generate
          
          echo '✅ Protocol buffer generation complete!'
        "

    - name: Verify generated files exist
      run: |
        if [ ! -d "internal/proto/gen" ] || [ -z "$(ls -A internal/proto/gen)" ]; then
          echo "❌ No protocol buffer files were generated"
          exit 1
        fi
        echo "✅ Generated $(find internal/proto/gen -name '*.go' | wc -l) Go files"

    - name: Download Go dependencies
      run: go mod download

    - name: Check formatting
      run: |
        echo "🔍 Checking Go code formatting..."
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ The following files are not formatted:"
          gofmt -s -l .
          echo "Run 'gofmt -s -w .' to fix formatting issues"
          exit 1
        fi
        echo "✅ All Go files are properly formatted"

    - name: Run go vet
      run: |
        echo "🔍 Running go vet..."
        go vet ./...

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  # Job 3: Protocol Buffer Linting and Breaking Change Detection
  proto-check:
    name: Protocol Buffer Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        nix_path: nixpkgs=channel:nixos-25.05

    - name: Setup Nix Cache
      uses: cachix/cachix-action@v13
      with:
        name: devenv

    - name: Lint Protocol Buffers
      run: |
        echo "🔍 Linting protocol buffer definitions..."
        nix develop --command buf lint

    - name: Check for breaking changes
      if: github.event_name == 'pull_request'
      run: |
        echo "🔍 Checking for breaking changes in protocol buffers..."
        nix develop --command buf breaking --against 'https://github.com/${{ github.repository }}.git#branch=${{ github.base_ref }}'

  # Job 4: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build  # Wait for protobuf generation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        nix_path: nixpkgs=channel:nixos-25.05

    - name: Setup Nix Cache
      uses: cachix/cachix-action@v13
      with:
        name: devenv

    - name: Cache generated protobuf files
      uses: actions/cache@v4
      id: proto-cache
      with:
        path: internal/proto/gen
        key: ${{ runner.os }}-proto-${{ hashFiles('internal/proto/**/*.proto', 'buf.gen.yaml', 'buf.work.yaml', 'internal/proto/buf.yaml') }}
        restore-keys: |
          ${{ runner.os }}-proto-

    - name: Generate Protocol Buffers if not cached
      if: steps.proto-cache.outputs.cache-hit != 'true'
      run: |
        echo "🔨 Generating protocol buffers for security scanning..."
        nix develop --command bash -c "
          echo '🧹 Cleaning previous generated files...'
          rm -rf internal/proto/gen
          
          echo '🔨 Running buf generate...'
          buf generate
          
          echo '✅ Protocol buffer generation complete!'
        "

    - name: Download Go dependencies
      run: go mod download

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'

    - name: Upload Gosec scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'gosec-results.sarif'

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 5: Build Docker Image (if Dockerfile exists)
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build, lint, proto-check]
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if Dockerfile exists
      id: dockerfile-check
      run: |
        if [ -f "Dockerfile" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Docker Buildx
      if: steps.dockerfile-check.outputs.exists == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      if: steps.dockerfile-check.outputs.exists == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: immich-go-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
