syntax = "proto3";

package immich.v1;

import "auth.proto";
import "asset.proto";
import "album.proto";
import "common.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/denysvitali/immich-go-backend/gen/immich/v1;immichv1";

// Main Immich API service that aggregates all other services
service ImmichAPI {
  // Authentication methods
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/auth/login"
      body: "*"
    };
  }

  rpc AdminSignUp(AdminSignUpRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/auth/admin-sign-up"
      body: "*"
    };
  }

  rpc ChangePassword(ChangePasswordRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/auth/change-password"
      body: "*"
    };
  }

  rpc Logout(google.protobuf.Empty) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/api/auth/logout"
      body: "*"
    };
  }

  rpc ValidateToken(google.protobuf.Empty) returns (ValidateTokenResponse) {
    option (google.api.http) = {
      post: "/api/auth/validateToken"
      body: "*"
    };
  }

  // Asset methods
  rpc GetAssets(GetAssetsRequest) returns (GetAssetsResponse) {
    option (google.api.http) = {
      get: "/api/assets"
    };
  }

  rpc GetAsset(GetAssetRequest) returns (Asset) {
    option (google.api.http) = {
      get: "/api/assets/{asset_id}"
    };
  }

  rpc UploadAsset(UploadAssetRequest) returns (Asset) {
    option (google.api.http) = {
      post: "/api/assets"
      body: "*"
    };
  }

  rpc UpdateAsset(UpdateAssetRequest) returns (Asset) {
    option (google.api.http) = {
      put: "/api/assets/{asset_id}"
      body: "*"
    };
  }

  rpc UpdateAssets(UpdateAssetsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/assets"
      body: "*"
    };
  }

  rpc DeleteAssets(DeleteAssetsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/assets"
      body: "*"
    };
  }

  rpc CheckExistingAssets(CheckExistingAssetsRequest) returns (CheckExistingAssetsResponse) {
    option (google.api.http) = {
      post: "/api/assets/exist"
      body: "*"
    };
  }

  rpc CheckBulkUpload(CheckBulkUploadRequest) returns (CheckBulkUploadResponse) {
    option (google.api.http) = {
      post: "/api/assets/bulk-upload-check"
      body: "*"
    };
  }

  rpc GetAssetStatistics(GetAssetStatisticsRequest) returns (AssetStatisticsResponse) {
    option (google.api.http) = {
      get: "/api/assets/statistics"
    };
  }

  rpc GetAllUserAssetsByDeviceId(GetAllUserAssetsByDeviceIdRequest) returns (GetAllUserAssetsByDeviceIdResponse) {
    option (google.api.http) = {
      get: "/api/assets/device/{device_id}"
    };
  }

  rpc GetRandom(GetRandomRequest) returns (GetRandomResponse) {
    option deprecated = true;
    option (google.api.http) = {
      get: "/api/assets/random"
    };
  }

  rpc RunAssetJobs(RunAssetJobsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/assets/jobs"
      body: "*"
    };
  }

  rpc DownloadAsset(DownloadAssetRequest) returns (DownloadAssetResponse) {
    option (google.api.http) = {
      get: "/api/assets/{asset_id}/original"
    };
  }

  rpc ReplaceAsset(ReplaceAssetRequest) returns (Asset) {
    option (google.api.http) = {
      put: "/api/assets/{asset_id}/original"
      body: "*"
    };
  }

  rpc GetAssetThumbnail(GetAssetThumbnailRequest) returns (GetAssetThumbnailResponse) {
    option (google.api.http) = {
      get: "/api/assets/{asset_id}/thumbnail"
    };
  }

  rpc PlayAssetVideo(PlayAssetVideoRequest) returns (PlayAssetVideoResponse) {
    option (google.api.http) = {
      get: "/api/assets/{asset_id}/video/playback"
    };
  }

  // Album methods
  rpc GetAllAlbums(GetAllAlbumsRequest) returns (GetAllAlbumsResponse) {
    option (google.api.http) = {
      get: "/api/albums"
    };
  }

  rpc CreateAlbum(CreateAlbumRequest) returns (Album) {
    option (google.api.http) = {
      post: "/api/albums"
      body: "*"
    };
  }

  rpc GetAlbumInfo(GetAlbumInfoRequest) returns (Album) {
    option (google.api.http) = {
      get: "/api/albums/{album_id}"
    };
  }

  rpc UpdateAlbumInfo(UpdateAlbumInfoRequest) returns (Album) {
    option (google.api.http) = {
      patch: "/api/albums/{album_id}"
      body: "*"
    };
  }

  rpc DeleteAlbum(DeleteAlbumRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/albums/{album_id}"
    };
  }

  rpc AddAssetsToAlbum(AddAssetsToAlbumRequest) returns (AddAssetsToAlbumResponse) {
    option (google.api.http) = {
      put: "/api/albums/{album_id}/assets"
      body: "*"
    };
  }

  rpc RemoveAssetFromAlbum(RemoveAssetFromAlbumRequest) returns (RemoveAssetFromAlbumResponse) {
    option (google.api.http) = {
      delete: "/api/albums/{album_id}/assets"
      body: "*"
    };
  }

  rpc AddUsersToAlbum(AddUsersToAlbumRequest) returns (Album) {
    option (google.api.http) = {
      put: "/api/albums/{album_id}/users"
      body: "*"
    };
  }

  rpc RemoveUserFromAlbum(RemoveUserFromAlbumRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/albums/{album_id}/user/{user_id}"
    };
  }

  rpc UpdateAlbumUser(UpdateAlbumUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/albums/{album_id}/user/{user_id}"
      body: "*"
    };
  }

  rpc GetAlbumStatistics(GetAlbumStatisticsRequest) returns (AlbumStatisticsResponse) {
    option (google.api.http) = {
      get: "/api/albums/statistics"
    };
  }
}
