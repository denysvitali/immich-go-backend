syntax = "proto3";

package immich.v1;

import "common.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/denysvitali/immich-go-backend/gen/immich/v1;immichv1";

// Server information and management service
service ServerService {
  // Get server about information
  rpc GetAboutInfo(google.protobuf.Empty) returns (ServerAboutResponse) {
    option (google.api.http) = {
      get: "/api/server/about"
    };
  }

  // Get server configuration
  rpc GetServerConfig(google.protobuf.Empty) returns (ServerConfigResponse) {
    option (google.api.http) = {
      get: "/api/server/config"
    };
  }

  // Get server features
  rpc GetServerFeatures(google.protobuf.Empty) returns (ServerFeaturesResponse) {
    option (google.api.http) = {
      get: "/api/server/features"
    };
  }

  // Get server license
  rpc GetServerLicense(google.protobuf.Empty) returns (LicenseResponse) {
    option (google.api.http) = {
      get: "/api/server/license"
    };
  }

  // Set server license
  rpc SetServerLicense(LicenseKeyRequest) returns (LicenseResponse) {
    option (google.api.http) = {
      put: "/api/server/license"
      body: "*"
    };
  }

  // Delete server license
  rpc DeleteServerLicense(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/server/license"
    };
  }

  // Get supported media types
  rpc GetSupportedMediaTypes(google.protobuf.Empty) returns (ServerMediaTypesResponse) {
    option (google.api.http) = {
      get: "/api/server/media-types"
    };
  }

  // Ping server
  rpc PingServer(google.protobuf.Empty) returns (ServerPingResponse) {
    option (google.api.http) = {
      get: "/api/server/ping"
    };
  }

  // Get server statistics
  rpc GetServerStatistics(google.protobuf.Empty) returns (ServerStatsResponse) {
    option (google.api.http) = {
      get: "/api/server/statistics"
    };
  }

  // Get server storage information
  rpc GetStorage(google.protobuf.Empty) returns (ServerStorageResponse) {
    option (google.api.http) = {
      get: "/api/server/storage"
    };
  }

  // Get server theme
  rpc GetTheme(google.protobuf.Empty) returns (ServerThemeResponse) {
    option (google.api.http) = {
      get: "/api/server/theme"
    };
  }

  // Get server version
  rpc GetServerVersion(google.protobuf.Empty) returns (ServerVersionResponse) {
    option (google.api.http) = {
      get: "/api/server/version"
    };
  }

  // Get version history
  rpc GetVersionHistory(google.protobuf.Empty) returns (ServerVersionHistoryResponse) {
    option (google.api.http) = {
      get: "/api/server/version-history"
    };
  }
}

// Server about information response
message ServerAboutResponse {
  string build = 1;
  string build_image = 2;
  string build_image_url = 3;
  string build_url = 4;
  string exiftool = 5;
  string ffmpeg = 6;
  string imagemagick = 7;
  string libvips = 8;
  bool licensed = 9;
  string nodejs = 10;
  string repository = 11;
  string repository_url = 12;
  string source_commit = 13;
  string source_ref = 14;
  string source_url = 15;
  string third_party_bug_feature_url = 16;
  string third_party_documentation_url = 17;
  string third_party_source_url = 18;
  string third_party_support_url = 19;
  string version = 20;
  string version_url = 21;
}

// Server configuration response
message ServerConfigResponse {
  string external_domain = 1;
  bool is_initialized = 2;
  bool is_onboarded = 3;
  string login_page_message = 4;
  string map_dark_style_url = 5;
  string map_light_style_url = 6;
  string oauth_button_text = 7;
  bool public_users = 8;
  int32 trash_days = 9;
  int32 user_delete_delay = 10;
}

// Server features response
message ServerFeaturesResponse {
  bool config_file = 1;
  bool duplicate_detection = 2;
  bool email = 3;
  bool facial_recognition = 4;
  bool import_faces = 5;
  bool map = 6;
  bool oauth = 7;
  bool oauth_auto_launch = 8;
  bool password_login = 9;
  bool reverse_geocoding = 10;
  bool search = 11;
  bool sidecar = 12;
  bool smart_search = 13;
  bool trash = 14;
}

// License key request
message LicenseKeyRequest {
  string activation_key = 1;
  string license_key = 2;
}

// License response
message LicenseResponse {
  google.protobuf.Timestamp activated_at = 1;
  string activation_key = 2;
  string license_key = 3;
}

// Server media types response
message ServerMediaTypesResponse {
  repeated string image = 1;
  repeated string sidecar = 2;
  repeated string video = 3;
}

// Server ping response
message ServerPingResponse {
  string res = 1;
}

// Usage by user
message UsageByUser {
  int32 photos = 1;
  optional int64 quota_size_in_bytes = 2;
  int64 usage = 3;
  int64 usage_photos = 4;
  int64 usage_videos = 5;
  string user_id = 6;
  string user_name = 7;
  int32 videos = 8;
}

// Server statistics response
message ServerStatsResponse {
  int32 photos = 1;
  int64 usage = 2;
  repeated UsageByUser usage_by_user = 3;
  int64 usage_photos = 4;
  int64 usage_videos = 5;
  int32 videos = 6;
}

// Server storage response
message ServerStorageResponse {
  string disk_available = 1;
  int64 disk_available_raw = 2;
  string disk_size = 3;
  int64 disk_size_raw = 4;
  double disk_usage_percentage = 5;
  string disk_use = 6;
  int64 disk_use_raw = 7;
}

// Server theme response
message ServerThemeResponse {
  string custom_css = 1;
}

// Server version response
message ServerVersionResponse {
  int32 major = 1;
  int32 minor = 2;
  int32 patch = 3;
}

// Version history item
message ServerVersionHistoryItem {
  google.protobuf.Timestamp created_at = 1;
  string id = 2;
  string version = 3;
}

// Server version history response
message ServerVersionHistoryResponse {
  repeated ServerVersionHistoryItem items = 1;
}
